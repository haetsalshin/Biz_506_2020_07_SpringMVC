/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-07-31 05:23:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/views/include/include-header.jspf", Long.valueOf(1596075811949L));
    _jspx_dependants.put("/WEB-INF/views/include/include-nav.jspf", Long.valueOf(1596171885825L));
    _jspx_dependants.put("/WEB-INF/views/include/include-head.jspf", Long.valueOf(1596161097992L));
    _jspx_dependants.put("/WEB-INF/views/include/include-footer.jspf", Long.valueOf(1596075838891L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<!--  이 파일은 stylesheet구조다.요즘에는 type을 사용하지 않지만 어떤 곳은 명시 해야만 해야되기도 한다. -->\r\n");
      out.write("<!--  내가 어제 navi와 header부분 디자인 만들어 놓은 것을 그대로 불러와서 적용하는 것. -->\r\n");
      out.write("<!-- include 사용하는 이유는 우리는 상당부분 article빼고는 다른 부분은 계속 같기 때문에\r\n");
      out.write("\t그래서 이러한 부분은 다시 만들지 않도록 따로 분리해두는 것\r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name='viewport' content='width=device-width, initial-scale=1'>\r\n");
      out.write("<!--  특수문자는 화면을 읽는 게 인식을 하지 못하므로 접근성 테스트에서 통과하지 못한다.\r\n");
      out.write("\t  따라서 웬만하면 특수문자 쓰지 말것\r\n");
      out.write(" -->\r\n");
      out.write("<title>나의 웹어플</title>\r\n");
      out.write("<link rel =\"stylesheet\" href = \"resources/css/main.css\" type =\"text/css\" >\r\n");
      out.write("<link rel =\"stylesheet\" href = \"resources/css/main-table.css\" type =\"text/css\" >");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("\t<h3> &#128032;나의 웹 어플리케이션 &#128032;</h3>\r\n");
      out.write("\t<P>나의 웹 어플리케이션에 방문해 주셔서 고맙습니다</P>\r\n");
      out.write("</header>");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("<nav>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t<!-- 북마크 : #p1 는 태그 id를 쓸 때사용하는 것 이므로 이렇게 #p1으로 해두는 것  -->\r\n");
      out.write("\t\t<li><a href=\"#\">HOME &#128044;\t</a></li>\r\n");
      out.write("\t\t<li><a href=\"list\">주문서 &#128044;</a></li>\r\n");
      out.write("\t\t<li><a href=\"#p2\">공지사항 &#128044;</a></li>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- 아래 클릭하면 google covid 결과창이 보인다.\r\n");
      out.write("        serarch에게 covid라는 단어를 보낼테니 그 결과를 나에게 보내줘라\r\n");
      out.write("        request Query : ?변수=값\r\n");
      out.write("        <p><a href=\"https://www.google.co.kr/search?q=covid\">구글검색</a></p>\r\n");
      out.write("   \t\t -->\r\n");
      out.write("    \r\n");
      out.write("\t\t<li><a href=\"order?seq=21\">바로가기 &#128044;</a></li>\r\n");
      out.write("\t\t<li><a href=\"#\">로그인 &#128044;</a></li>\r\n");
      out.write("\t\t<li><a href=\"#\">회원가입 &#128044;</a></li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("</nav>");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<section>\r\n");
      out.write("\t<h3>반갑습니다 &#128131; </h3>\r\n");
      out.write("\t<p>나는 ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" 입니다.</br> 방문해주셔서&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t반갑습니다아아아아아아 &#128064; </p>\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t<p id=\"p1\">& nbsp ; 는 Non-Breaking space의 약자로 web page에서 문서를 작성할 때</br>\r\n");
      out.write("\t단어와 단어 사이에 강제로 빈칸을 추가 하고자 할 때 사용하는 특수문자</br>\r\n");
      out.write("\tweb page에서는 space(공백)문자는 개수에 상관없이 1개만 표시하게 되기 때문에</br>\r\n");
      out.write("\t단어와 단어사이에 많은 갯수의 빈칸을 넣고 싶으면 & nbsp ; 특수코드를 넣는다.\r\n");
      out.write("\t\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t<p id=\"p2\">& nbsp ; 는 Non-Breaking space의 약자로 web page에서 문서를 작성할 때</br>\r\n");
      out.write("\t단어와 단어 사이에 강제로 빈칸을 추가 하고자 할 때 사용하는 특수문자</br>\r\n");
      out.write("\tweb page에서는 space(공백)문자는 개수에 상관없이 1개만 표시하게 되기 때문에</br>\r\n");
      out.write("\t단어와 단어사이에 많은 갯수의 빈칸을 넣고 싶으면 & nbsp ; 특수코드를 넣는다.\r\n");
      out.write("\t\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t<p id=\"p3\">& nbsp ; 는 Non-Breaking space의 약자로 web page에서 문서를 작성할 때</br>\r\n");
      out.write("\t단어와 단어 사이에 강제로 빈칸을 추가 하고자 할 때 사용하는 특수문자</br>\r\n");
      out.write("\tweb page에서는 space(공백)문자는 개수에 상관없이 1개만 표시하게 되기 때문에</br>\r\n");
      out.write("\t단어와 단어사이에 많은 갯수의 빈칸을 넣고 싶으면 & nbsp ; 특수코드를 넣는다.\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- Pre :  내가 입력한 그대로 출력되도록 하는 tag. 빈칸이랑 다 포함이 된다. -->\r\n");
      out.write("\t\r\n");
      out.write("\t\t<pre>\r\n");
      out.write("\t\t\t우리는 대한민국       사람입니다.\r\n");
      out.write("\t\t\tRepublic of Korea\r\n");
      out.write("\t\t\t&nbsp; 우리나라만세~\r\n");
      out.write("\t\t</pre>\r\n");
      out.write("\t</p>\r\n");
      out.write("\t\r\n");
      out.write("\t</section>\r\n");
      out.write("\t<section>\r\n");
      out.write("\t\t<img src =\"resources/images/turkey.jpg\" alt =\"터키 사진\" width=\"300px\" >\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t</section>\t\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<footer>\r\n");
      out.write("\t\t<!-- address라는 태그로 감싸면 이탤릭체로 된다. -->\r\n");
      out.write("\t\t<!--  &앤드는 아래와 같이 copy와 amp같은 걸 쓸 때 써주기 때문에 둘이 중복되지 않도록\r\n");
      out.write("\t\t원래는 사용하는 것이 금지 되어 있다. 그래서 저런형식으로 써주는 것. -->\r\n");
      out.write("\t\t<address>CopyRight &copy; sinsin09022@gamil.com &#128157;</address>\r\n");
      out.write("\t\t<address>Korea &amp; 대한민국 &#128123;</address>\r\n");
      out.write("\t</footer>");
      out.write("\r\n");
      out.write("\t<p>서버의 현재 시각 ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${serverTime}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
